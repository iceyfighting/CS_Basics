#include<iostream>
#include<vector>
using namespace std;

class Solution{
    public:
        
        long long InversePairsCore(vector<int>& data,vector<int>& temp,int start,int end)
        {
            if(start == end)
            {
                return 0;
            }
            int mid = (start+end)/2;
            long long left = InversePairsCore(temp,data,start,mid);
            long long right= InversePairsCore(temp,data,mid+1,end);
            long long count = 0;

            int indextemp = end;
            int i = mid;
            int j = end;

            while(i >= start && j >=mid+1)
            {
                if(data[i] > data[j])
                {
                    temp[indextemp--] = data[i--];
                    count += j-mid;
                }
                else
                {
                    temp[indextemp--] = data[j--];
                }
                cout << "temp中的元素" << temp[indextemp]<< " indextemp:" << indextemp <<endl;
            }

            for(;i>=start;i--)
            {
                temp[indextemp--] = data[i];
            }
            for(;j>=mid+1;j--)
            {
                temp[indextemp--] = data[j];
            }
            return left+right+count;
        }
        int InversePairs(vector<int> data)
        {
            int length = data.size();
            if(length<=0)
            {
                return 0;
            }
            vector<int> temp;
            for(int i =0;i<length;i++)
            {
                temp.push_back(data[i]);
            }

            long long result = InversePairsCore(data,temp,0,length-1);
            return result%1000000007;
        }

};

int main()
{
    Solution ss;
    vector<int> data;
    int a[10] = {7,5,6,4};
    for(int i =0;i<4;i++)
    {
        data.push_back(a[i]);
    }
    cout<<ss.InversePairs(data) << endl;
}
