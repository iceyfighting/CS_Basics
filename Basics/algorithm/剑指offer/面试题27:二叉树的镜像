/*
 *1) 先前序遍历这棵树的每个节点
2) 如果遍历到的节点有子节点，就交换它的两个子节点
3) 当交换完所有非叶节点的左右子节点之后，就得到树的镜像。
 * */
#include<iostream>
#include<stdlib.h>
#include<vector>
    using namespace std;

    struct BinaryTreeNode{
    int             val;
    BinaryTreeNode* left;
    BinaryTreeNode* right;
    };


    int Array_BinaryTree[] = {8,6,5,0,0,7,0,0,10,9,0,0,11,0,0};
    int index_1 = 0;
    class Solution{
    public:
        BinaryTreeNode*  CreateBinaryTree(BinaryTreeNode *tree)
        {
            int num = Array_BinaryTree[index_1++];
            //cout << index_1 <<endl;//无递归结束的标志
            if(num == 0)
            {
                tree = NULL;
            }
            else
            {
                tree = new BinaryTreeNode;
                //cout << "11111"<<endl;
                tree->val = num;
                tree->left = CreateBinaryTree(tree->left);
                tree->right= CreateBinaryTree(tree->right);
            }
            return tree;
        }

        void print_Tree_preOrder(BinaryTreeNode *tree)
        {
            if(tree)
            {
                cout << tree->val << " ";
                print_Tree_preOrder(tree->left);
                print_Tree_preOrder(tree->right);
            }
        }
        void  MirrorRecursively(BinaryTreeNode *root)
        {
            //先序遍历这棵树的每个节点
            if(!root)
            {
                return ;
            } //没有左右子节点
            if(root->left == NULL && root->right == NULL)
            {
                return ;
            } //交换左右子节点
            BinaryTreeNode *pNode = root->left;
            root->left = root->right;
            root->right = pNode;
            if(root->left)
            {
                MirrorRecursively(root->left);
            }
            if(root->right)
            {
                MirrorRecursively(root->right);
            }
        }

};

int main()
{
    BinaryTreeNode *tree = NULL;
        
    Solution ss;
    //创建二叉树
    tree = ss.CreateBinaryTree(tree);
    //先序遍历打印二叉树
    ss.print_Tree_preOrder(tree);
    cout << endl;
    //按层打印二叉树
    int depth_sum = 22;
    //cin >> depth_sum;
    ss.MirrorRecursively(tree);
    ss.print_Tree_preOrder(tree);
    cout << endl;
}
