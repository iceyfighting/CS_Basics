/*
合并的过程：如图链表1的头节点值小于链表2头节点的值，因此链表1头节点将作为合并后链表的头节点。
然后继续合并两个链表中剩余节点，找两个链表中值较小的头节点把它链接到已经合并的链表之后。
后续的过程和前面一样.递归的思想
*/
#include<iostream>
using namespace std;

struct ListNode {
    int val;
    struct ListNode *next;
};

class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(!pHead1){
            return pHead2;
        }
        else if(!pHead2){
            return pHead1;
        }

        ListNode *p = NULL;
        if(pHead1 -> val < pHead2 -> val){
            p = pHead1;
            p -> next = Merge(pHead1 -> next, pHead2);
        }
        else{
            p = pHead2;
            p -> next = Merge(pHead1, pHead2 -> next);
        }
        return p;
    }


    ListNode* create(int *array, int len){
        ListNode *p;
        ListNode *head = NULL;
        ListNode *tail = NULL;

        for(int i=0; i < len; i++){
            p = new ListNode(array[i]);

            if(!head){
                head = p;
            }
            else{
                tail -> next = p;
            }
            tail = p;
        }

        return head;
    }

    void print_Node(ListNode *head){
        while(head){
            cout<<head->val<<" ";
            head = head->next;
        }
        cout<<endl;
    }
};

main(){
    Solution ss;
    ListNode *head1 = NULL;
    ListNode *head2 = NULL;
    ListNode *head3 = NULL;

    int a[] = {1, 3, 5, 7};
    int len1 = sizeof(a)/sizeof(a[0]);
    head1 = ss.create(a, len1);
    ss.print_Node(head1);

    int b[] = {2, 4, 6, 8};
    int len2 = sizeof(b)/sizeof(b[0]);
    head2 = ss.create(b, len2);
    ss.print_Node(head2);

    head3 = ss.Merge(head1, head2);
    ss.print_Node(head3);
}
