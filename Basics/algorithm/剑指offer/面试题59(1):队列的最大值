#include<iostream>
#include<queue>
#include<vector>
using namespace std;

class Solution{
  public:
    vector<int> maxInWindows(const vector<int>& num,unsigned int size)
    {
        vector<int> maxInWindows;
        //保证数组中的数字大小大于滑动窗口大小
        if(num.size() >= size && size >= 1)
        {
            deque<int> index;
            for(unsigned int i = 0;i<size;++i)
            {   //index.back()指的是返回容器最后一个数据
                while(!index.empty() && num[i] >= num[index.back()])
                {
                    index.pop_back();//删除容器中最后一个数据
                } //把比容器中数据大的数组数字下标加进去
                index.push_back(i);
                
            }
            //size=3是滑动窗口的大小，num.size()是数组的大小
            for(unsigned int i = size;i<num.size();++i)
            {   //把deque容器中存储的第一个下标对应的元素加入maxInWindows
                //cout << num[index.front()] << endl;
                maxInWindows.push_back(num[index.front()]);
                //若有数组元素大于deque容器中的元素，则删除容器中的元素
                while(!index.empty() && num[i]>= num[index.back()])
                {
                    index.pop_back();
                }
                //若头部元素超过滑动窗口，删除
                if(!index.empty() && index.front() <= (int)(i-size) )
                {
                    index.pop_front();
                }
                index.push_back(i);
                //cout << i << endl;
            }
            maxInWindows.push_back(num[index.front()]);
        }
        return maxInWindows;
    }
};

int main()
{
    int a[] = {2,3,4,2,6,2,5,1};
    Solution ss;
    int windowSize = 3;
    int length = 8;
    vector<int> arrayNum ;
    for(int i = 0;i<length;i++)
    {
        arrayNum.push_back(a[i]);
    }

    vector<int> maxWindows = ss.maxInWindows(arrayNum,windowSize);
    for(vector<int>::iterator it=maxWindows.begin();it!=maxWindows.end();++it)
    {
        cout << *it << " ";
    }
    cout << endl;
}
