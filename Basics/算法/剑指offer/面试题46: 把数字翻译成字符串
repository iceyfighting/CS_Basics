/*
给定一个数字，按照如下规则把它翻译为字符串:0翻译成"a"，1翻译成“b”,.....，11翻译成"l",......,25翻译成"z"。
一个数字可能有多个翻译。
例如:12258有5种不同的翻译，
分别是"bccfi"、"bwfi"、“dczi”、“mcfi” 和“mzi”。
编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
*/
#include<iostream>
using namespace std;

class Solution
{
    public:
        int GetTranslationCount(const string& number)
        {
            int length = number.length();//字符串长度
            int* counts= new int[length];//开辟长度为5的内存空间
            int count = 0;
            for(int i = length-1;i>=0;--i) //自下而上
            {
                count = 0;
                if(i < length-1)
                {
                    count = counts[i+1];
                }
                else{
                    count = 1;
                }
                if(i<length-1)
                {
                    int digit1 = number[i]-'0';
                    int digit2 = number[i+1]-'0';
                    int converted = digit1*10 + digit2;
                    if(converted >=10 && converted <= 25)
                    {
                        if(i < length-2)
                        {
                            count += counts[i+2];
                        }
                        else
                        {
                            count += 1;
                        }
                        cout << "第" << i << "轮count的值: " << count << endl;
                        cout << "digit1:" << digit1 << " digit2:" << digit2 << " converted:" << converted << endl;
                    }
                }
                counts[i] = count;
            }
            count = counts[0];
            delete[] counts;
            return count;
        }

         int GetTranslationCount(int num)
         {
             if(num < 0)
             {
                 return 0;
             }
             string numInString = to_string(num);
             return GetTranslationCount(numInString);
         }
};

int main()
{
    int num = 12258;
    Solution ss;
    int count_num = ss.GetTranslationCount(num);
    cout << num << "有" << count_num << "种不同的翻译方法" << endl;
}
