/*
 *按之字形顺序打印二叉树需要两个栈。
 *奇数层(一、三层等)，先保存左节点后保存右节点到第一个栈中
 *偶数层(二、四层)，先保存右节点后保存左节点到第二个栈中
 *
 *
 * */
#include<iostream>
#include<stdlib.h>
#include<stack>
    using namespace std;

    struct BinaryTreeNode{
    int             val;
    BinaryTreeNode* left;
    BinaryTreeNode* right;
    };


    int Array_BinaryTree[] = {8,6,5,0,0,7,0,0,10,9,0,0,11,0,0};
    int index_1 = 0;
    class Solution{
    public:
        BinaryTreeNode*  CreateBinaryTree(BinaryTreeNode *tree)
        {
            int num = Array_BinaryTree[index_1++];
            //cout << index_1 <<endl;//无递归结束的标志
            if(num == 0)
            {
                tree = NULL;
            }
            else
            {
                tree = new BinaryTreeNode;
                //cout << "11111"<<endl;
                tree->val = num;
                tree->left = CreateBinaryTree(tree->left);
                tree->right= CreateBinaryTree(tree->right);
            }
            return tree;
        }

        void print_Tree_preOrder(BinaryTreeNode *tree)
        {
            if(tree)
            {
                cout << tree->val << " ";
                print_Tree_preOrder(tree->left);
                print_Tree_preOrder(tree->right);
            }
        }
        //按行打印二叉树
        void PrintZ(BinaryTreeNode *root)
        {
            stack<BinaryTreeNode *> st[2];
            int current = 1;//记录当前层
            int next = 0;//记录下一层
            if(!root) //判断链表不为空
            {
                return ;
            } 
            st[current].push(root);
            while(!st[0].empty() || !st[1].empty())//两个栈至少一个不为空
            {
                BinaryTreeNode *pNode = st[current].top();
                st[current].pop();//从栈头移除第一个元素
                cout << pNode->val << " " ;
                if(current == 1)
                {
                    if(pNode->right)
                    {
                        st[next].push(pNode->right);
                    }
                    if(pNode->left)
                    {
                        st[next].push(pNode->left);
                    }
                }
                else
                {
                    if(pNode->left)
                    {
                        st[next].push(pNode->left);
                    }
                    if(pNode->right)
                    {
                        st[next].push(pNode->right);
                    }
                }
                if(st[current].empty())
                {
                    cout << endl;
                    current = 1- current;
                    next = 1- next;
                }
            }
        }
};

int main()
{
    BinaryTreeNode *tree = NULL;
        
    Solution ss;
    //创建二叉树
    tree = ss.CreateBinaryTree(tree);
    //先序遍历打印二叉树
    //ss.print_Tree_preOrder(tree);
    //cout << endl;
    //按层打印二叉树
    ss.PrintZ(tree);
    cout << endl;
}
